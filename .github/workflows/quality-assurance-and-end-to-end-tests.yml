# This workflow runs comprehensive testing for all commits and PRs, with optimized
# handling for release commits to balance security and efficiency.
#
# BEHAVIOR:
# ========
#
# For NORMAL commits and PRs:
# - Full Quality Assurance: linting, type checking, unused code detection, unit tests
# - Complete End-to-End testing with Playwright
# - Build verification
# - ~4 minutes total execution time
#
# For RELEASE commits (commit message contains "chore: release"):
# - Setup and dependency installation (always required)
# - Build test (critical for deployment validation)
# - SKIPPED: linting, type checking, unit tests, E2E tests
# - ~1 minute total execution time
#
# RATIONALE:
# ==========
# Release commits only change version numbers in package.json. The actual code
# was already tested when the PR was merged. However, we still run the build test
# to ensure the release is deployable and package.json is not corrupted.
#
# CONCURRENCY:
# ============
# Prevents parallel runs for the same PR/branch to save CI resources and avoid
# conflicts. Main branch pushes run independently as they represent deployment stages.

# Prevent parallel CI runs for the same PR/branch to save resources
# and avoid conflicts during testing. Allow main branch pushes
# to run independently since they represent deployment stages.

name: Quality Assurance & End-to-End Tests

concurrency:
  group: qa-e2e-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  quality-assurance:
    name: Quality Assurance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if release commit
        id: check_release
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ "$COMMIT_MSG" == *"chore: release "* ]]; then
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "This is a release commit - Quality Assurance will be skipped"
          else
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "Not a release commit - continuing with Quality Assurance"
          fi

      - name: Setup Node.js + npm cache
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Setup .npmrc from template
        run: npm run setup-npmrc
        env:
          GITHUB_PAT: ${{ secrets.GH_PAT }}

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        if: steps.check_release.outputs.should_run == 'true'
        run: npm run lint

      - name: Type check
        if: steps.check_release.outputs.should_run == 'true'
        run: npm run check:types

      - name: Check for unused code & dependencies
        if: steps.check_release.outputs.should_run == 'true'
        run: npm run check:unused

      - name: Run unit tests
        if: steps.check_release.outputs.should_run == 'true'
        run: npm run test

      - name: Build application
        run: npm run build:ci

  end-to-end-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if release commit
        id: check_release
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ "$COMMIT_MSG" == *"chore: release "* ]]; then
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "This is a release commit - End-to-End Tests will be skipped"
          else
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "Not a release commit - continuing with End-to-End Tests"
          fi

      - name: Setup Node.js + npm cache
        if: steps.check_release.outputs.should_run == 'true'
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Setup .npmrc from template
        if: steps.check_release.outputs.should_run == 'true'
        run: npm run setup-npmrc
        env:
          GITHUB_PAT: ${{ secrets.GH_PAT }}

      - name: Install dependencies
        if: steps.check_release.outputs.should_run == 'true'
        run: npm ci

      - name: Restore Playwright browser cache
        if: steps.check_release.outputs.should_run == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}

      - name: Install Playwright browsers
        if: steps.check_release.outputs.should_run == 'true'
        run: npx playwright install --with-deps

      - name: Build application for end-to-end tests
        if: steps.check_release.outputs.should_run == 'true'
        run: npm run build:ci

      - name: Run end-to-end tests
        if: steps.check_release.outputs.should_run == 'true'
        run: npm run test:e2e

      - name: Upload Playwright report
        if: ${{ !cancelled() && steps.check_release.outputs.should_run == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
