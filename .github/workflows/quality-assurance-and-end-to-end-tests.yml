name: Quality Assurance & End-to-End Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  quality-assurance:
    name: Quality Assurance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if release commit
        id: check_release
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ "$COMMIT_MSG" == *"chore: release "* ]]; then
            echo "should_skip=true" >> $GITHUB_OUTPUT
            echo "This is a release commit - Quality Assurance will be skipped"
          else
            echo "should_skip=false" >> $GITHUB_OUTPUT
            echo "Not a release commit - continuing with Quality Assurance"
          fi

      - name: Setup Node.js + npm cache
        if: steps.check_release.outputs.should_skip != 'true'
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Setup .npmrc from template
        if: steps.check_release.outputs.should_skip != 'true'
        run: npm run setup-npmrc
        env:
          GITHUB_PAT: ${{ secrets.GH_PAT }}

      - name: Install dependencies
        if: steps.check_release.outputs.should_skip != 'true'
        run: npm ci

      - name: Validate package version vs. release tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # This step runs for ALL tag pushes, including release commits
          # because version validation is critical for releases
          if [ "${{ steps.check_release.outputs.should_skip }}" == "true" ]; then
            echo "Release commit detected - installing dependencies for tag validation only"
            npm run setup-npmrc
            npm ci
          fi
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          RELEASE_TAG=${GITHUB_REF#refs/tags/}
          echo "Package version: v$PACKAGE_VERSION"
          echo "Release tag:     $RELEASE_TAG"
          if [ "v$PACKAGE_VERSION" != "$RELEASE_TAG" ]; then
            echo "::error::Package version and git tag differ!"
            exit 1
          fi
          echo "Version validation passed"

      - name: Run linting
        if: steps.check_release.outputs.should_skip != 'true'
        run: npm run lint

      - name: Type check
        if: steps.check_release.outputs.should_skip != 'true'
        run: npm run check:types

      - name: Check for unused code & dependencies
        if: steps.check_release.outputs.should_skip != 'true'
        run: npm run check:unused

      - name: Run unit tests
        if: steps.check_release.outputs.should_skip != 'true'
        run: npm run test

      - name: Build application
        if: steps.check_release.outputs.should_skip != 'true'
        run: npm run build:ci

  end-to-end-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if release commit
        id: check_release
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ "$COMMIT_MSG" == *"chore: release "* ]]; then
            echo "should_skip=true" >> $GITHUB_OUTPUT
            echo "This is a release commit - End-to-End Tests will be skipped"
          else
            echo "should_skip=false" >> $GITHUB_OUTPUT
            echo "Not a release commit - continuing with End-to-End Tests"
          fi

      - name: Setup Node.js + npm cache
        if: steps.check_release.outputs.should_skip != 'true'
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Setup .npmrc from template
        if: steps.check_release.outputs.should_skip != 'true'
        run: npm run setup-npmrc
        env:
          GITHUB_PAT: ${{ secrets.GH_PAT }}

      - name: Install dependencies
        if: steps.check_release.outputs.should_skip != 'true'
        run: npm ci

      - name: Restore Playwright browser cache
        if: steps.check_release.outputs.should_skip != 'true'
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}

      - name: Install Playwright browsers
        if: steps.check_release.outputs.should_skip != 'true'
        run: npx playwright install --with-deps

      - name: Build application for end-to-end tests
        if: steps.check_release.outputs.should_skip != 'true'
        run: npm run build:ci

      - name: Run end-to-end tests
        if: steps.check_release.outputs.should_skip != 'true'
        run: npm run test:e2e

      - name: Upload Playwright report
        if: ${{ !cancelled() && steps.check_release.outputs.should_skip != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
